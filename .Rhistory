main="Width and Length")
abline(v=2) #linea vertical en 2
abline(h=5) #linea horizontal en 5
abline(2,2) #linea con intercepto 2 y pendiente 2
points(2,3,pch=20,cex=1.5,col="green"); text(2,3,"Ejemplo", pos = 4)
head(iris)
install.packages("dplyr")
library(dplyr)
uno = select(iris, Sepal.Length, Sepal.Width)
View(uno)
dos= filter(iris, Species=='setosa', Sepal.Length < 5)
View(dos)
tres = arrange(iris, Sepal.Length)
View(tres)
cuatro = iris %>%
mutate(test = Petal.Width/Petal.Length)
View(cuatro)
iris %>%
group_by(Species) %>%
summarise(sum(Petal.Length))
library("dplyr")
install.packages("hflights")
library("hflights")
flights <- hflights
uno = hflights %>%
mutate(TTT = TaxiIn + TaxiOut)
View(flights)
uno = hflights %>%
mutate(TTT = TaxiIn + TaxiOut)
uno = flights %>%
mutate(TTT = TaxiIn + TaxiOut)
dos= hflights %>%
mutate(TotalDelay = ArrDelay + DepDelay)
View(cuatro)
View(dos)
cuatro = filter (hflights, is.na(ArrTime)==T)
tres = filter ( hflights, ArrDelay>0, AirTime<1)
cinco = arrange (hflights, UniqueCarrier, -ArrDelay)
View(cinco)
seis= select(hflights, Tailnum, filter(hflights, Cancelled =! 1))
ocho= select(hflights, UniqueCarrier, AirTime, Distance)
hflights %>%
group_by(UniqueCarrier) %>%
summarise(mean(AirTime,Distance))
seis= select(hflights, Tailnum, Cancelled)
seis.1= filter(seis, Canceled = 1)
hflights %>%
group_by(UniqueCarrier) %>%
summarise(mean(AirTime),mean(Distance))
library(dplyr)
library(tidyverse)
library(dplyr)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
carros=mtcars
View(carros)
uno = filter (mtcars, cyl == 4)
View(uno)
dos = filter (mtcars, cyl == 6 | cyl == 8)
View(dos)
tres = filter(mtcars; cyl ==6, mpg==21)
tres = filter(mtcars, cyl ==6, mpg==21)
View(tres)
tres = filter(mtcars, cyl ==6, mpg>21)
cuatro= arrange(mtcars, hp, 1)
View(cuatro)
cuatro= arrange(mtcars, hp, column:1)
cuatro= select(mtcars,hp,everything())
View(cuatro)
cinco= mtcars %>%
summarise(distinct_mpg = n_distinct(mpg))
seis= mtcars %>%
mutate(rendimiento = mpg / cyl)
siete = seis %>%
mutate(rendimiento = rendimiento + disp)
promedio8= mtcars %>%
filter(mpg < 18) %>%
summarise(promedio_hp = mean(hp))
promedio9= mtcars %>%
group_by(cyl) %>%
summarise(promedio_hp = mean(hp))
promedio9= mtcars %>%
group_by(cyl) %>%
summarise(mean(hp))
promedio8= mtcars %>%
filter(mpg < 18) %>%
summarise(mean(hp))
diez = mtcars %>%
sample_n(8)
pesos= c(0.05,0.05,0.05.0.05,0.05,rep(0.75/27,27))
pesos= c(0.05 , 0.05 , 0.05 , 0.05 , 0.05,rep(0.75/27,27))
once= sample_n(mtcars, 8, weights = pesos)
install.packages("tidyverse")
install.packages("ggplot")
library("tidyr")
library("ggplot2")
ejemplo1 <- data.frame(estudiante=c("juan","pedro","lucas","raymundo"),
año1=c(64, 75, 89, 88),
año2=c(94, 66, 99, 55))
View(ejemplo1)
install.packages("tidyverse")
install.packages("ggplot2")
library("tidyr")
library("ggplot2")
acumulado1= c()
for j in 1:50{
bono2= sample(c(1,0),1,prob = c(0.975,0.025))*bono2*1.06
acumulado1= c()
for j in 1:50{
for(j in 1:50){
bono2= 100
for i in 1:5 {
acumulado1= c()
for (j in 1:50){
bono1= 100
for i in 1:5 {
for (i in 1:5) {
bono2= sample(c(1,0),1,prob = c(0.975,0.025))*bono2*1.06
}
acumulado1= c()
for (j in 1:50){
bono1= 100
for (i in 1:5) {
bono1 = sample(c(1,0),1,prob = c(0.925,0.075))*bono1*1.08
}
acumulado1 = c(acumulado1,bono1)
}
mean(acumulado1)
acumulado2= c()
for(j in 1:50){
bono2= 100
for (i in 1:5) {
bono2= sample(c(1,0),1,prob = c(0.975,0.025))*bono2*1.06
}
acumulado2 = c(acumulado2,bono2)
promedio = acumulado2
}
mean(acumulado2)
library(tidyverse)
library(ggplot2)
library(openxlsx)
library(scorecard)
df <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data")
colnames(df) <- c("chk_acct", "duration", "credit_his", "purpose",
"amount", "saving_acct", "present_emp", "installment_rate", "sex", "other_debtor",
"present_resid", "property", "age", "other_install", "housing", "n_credits",
"job", "n_people", "telephone", "foreign", "response")
df$response[df$response==2] <- 0
df %>% summary()
df.age <- df %>% select(age,response) %>%
group_by(age) %>% summarise(bad_credit = sum(response == 1)
,good_credit = sum(response == 0)
,total_credit = sum(bad_credit, good_credit)
,bad_rate = bad_credit/total_credit)
df.age %>% View()
ggplot(df.age, aes(x = age, y = bad_rate)) +
geom_line() +
labs(title = "Tasa de Malos de la variable Age",
x = "Edad",
y= "Bad Rate") +
theme_minimal()
ggplot(df.age, aes(x = age)) +
# Barras para total_credit
geom_bar(aes(y = total_credit), stat = "identity", fill = "skyblue", alpha = 0.7) +
# Línea para bad_rate
geom_line(aes(y = bad_rate * max(total_credit)), color = "red", size = 1) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
labs(title = "Tasa de Malos de la Variable Age",
x = "Edad") +
theme_minimal()
ggplot(df.age, aes(x = age)) +
# Barras para total_credit con colores personalizados
geom_bar(aes(y = total_credit), stat = "identity", fill = "#69b3a2", alpha = 0.8) +
# Línea para bad_rate con un color contrastante
geom_line(aes(y = bad_rate * max(total_credit)), color = "#404080", size = 1.2) +
# Puntos en la línea para destacar los valores de bad_rate
geom_point(aes(y = bad_rate * max(total_credit)), color = "#404080", size = 3) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
df.age_bin <- df %>% select(age,response) %>%
mutate(age_bin = ntile(age,5)) %>%
group_by(age_bin) %>% summarise(bad_credit = sum(response == 1),
good_credit= sum(response == 0),
total_credit=sum(bad_credit,good_credit),
bad_rate = bad_credit/total_credit,
min_age = min(age),
max_age = max(age)
)
ggplot(df.age, aes(x = age)) +
# Barras para total_credit con colores personalizados
geom_bar(aes(y = total_credit), stat = "identity", fill = "#69b3a2", alpha = 0.8) +
# Línea para bad_rate con un color contrastante
geom_line(aes(y = bad_rate * max(total_credit)), color = "#404080", size = 1.2) +
# Puntos en la línea para destacar los valores de bad_rate
geom_point(aes(y = bad_rate * max(total_credit)), color = "#404080", size = 3) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
# Añadir etiquetas de datos sobre las barras
geom_text(aes(y = total_credit, label = total_credit), vjust = -0.5, color = "#404080", size = 3.5) +
# Añadir etiquetas de datos sobre la línea
geom_text(aes(y = bad_rate * max(total_credit), label = scales::percent(bad_rate, accuracy = 0.1)),
vjust = -0.5, color = "#404080", size = 3.5) +
labs(title = "Tasa de Malos y Total de Créditos por Edad",
x = "Edad", y = "Total de Créditos") +
theme_minimal(base_size = 14) +
# Personalizar el tema para un mejor aspecto
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.y = element_text(color = "#69b3a2"),
axis.title.y.right = element_text(color = "#404080"),
legend.position = "none",
panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "grey80")
)
# ---- Binning con Dplyr ----
df.age_bin <- df %>% select(age,response) %>%
mutate(age_bin = ntile(age,5)) %>%
group_by(age_bin) %>% summarise(bad_credit = sum(response == 1),
good_credit= sum(response == 0),
total_credit=sum(bad_credit,good_credit),
bad_rate = bad_credit/total_credit,
min_age = min(age),
max_age = max(age)
)
df.age_bin
ggplot(df.age_bin, aes(x = age_bin)) +
# Barras para total_credit
geom_bar(aes(y = total_credit), stat = "identity", fill = "skyblue", alpha = 0.7) +
# Línea para bad_rate
geom_line(aes(y = bad_rate * max(total_credit)), color = "red", size = 1) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age_bin$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
labs(title = "Tasa de Malos de los Bines de la Variable Age",
x = "Bines de Edad") +
theme_minimal()
df.age_bin_woe <- df.age_bin %>%
mutate(
pct_good = good_credit/total_credit
,pct_bad = good_credit/total_credit
,woe = log(pct_good / pct_bad)
,iv_bin = (pct_good - pct_bad)*woe
,iv_var = sum(iv_bin)
)
df.age_bin_woe %>%
view()
df.age_bin <- df %>% select(age,response) %>%
mutate(age_bin = ntile(age,5)) %>%
group_by(age_bin) %>% summarise(bad_credit = sum(response == 1),
good_credit= sum(response == 0),
total_credit=sum(bad_credit,good_credit),
bad_rate = bad_credit/total_credit,
min_age = min(age),
max_age = max(age)
)
df.age_bin
df.age_bin_woe <- df.age_bin %>%
mutate(
pct_good = good_credit/total_credit
,pct_bad = good_credit/total_credit
,woe = log(pct_good/pct_bad)
,iv_bin = (pct_good - pct_bad)*woe
,iv_var = sum(iv_bin)
)
df.age_bin_woe %>%
view()
df.age_bin_woe <- df.age_bin %>%
mutate(
pct_good = good_credit/total_credit
,pct_bad = bad_credit/total_credit
,woe = log(pct_good/pct_bad)
,iv_bin = (pct_good - pct_bad)*woe
,iv_var = sum(iv_bin)
)
df.age_bin_woe %>%
view()
df.age_bin_woe <- df.age_bin %>%
mutate(
pct_good = good_credit/sum(good_credit)
,pct_bad = bad_credit/sum(bad_credit)
,woe = log(pct_good/pct_bad)
,iv_bin = (pct_good - pct_bad)*woe
,iv_var = sum(iv_bin)
)
df.age_bin_woe %>%
view()
bins <- woebin(df, y = "response", x = c("age"))
bins$age %>% view()
bins <- woebin(df, y = "response", x = c("age"))
bins$age %>% view()
df_binned <- woebin_ply(df,bins)
head(df_binned)
plot <- woebin_plot(bins)
plot[[1]]
library (nycflights13)
install.packages(nycflights13)
install.packages("nycflights13")
install.packages("lubridate")
library (nycflights13)
library (dplyr)
library (lubridate)
today()
now()
make_date(year= 2024, month = 10, day = 07)
x <- "1994 October 27th"
ymd(x)
y <- "27.10.2024"
dmy(y)
date_landing <- mdy("July 20, 1969")
moment_step <- mdy_hms("July 20, 1969, 02:56:15", tz= "UTC")
difftime(today(), date_landing, units = days)
date_landing <- mdy("July 20, 1969")
moment_step <- mdy_hms("July 20, 1969, 02:56:15", tz= "UTC")
difftime(today(), date_landing, units = days)
date_landing <- mdy("July 20, 1969")
moment_step <- mdy_hms("July 20, 1969, 02:56:15", tz= "UTC")
difftime(today(), date_landing, units = "days")
round_date(today(), unit = "month")
View(flights)
knitr::opts_chunk$set(echo = TRUE)
departure <- flights %>%
mutate(
dep_hour = dep_time %/% 100,      # División entera para obtener la hora
dep_min = dep_time %% 100,        # Módulo para obtener los minutos
dep_datetime = make_datetime(year, month, day, dep_hour, dep_min)
)
arrival <- flights %>%
mutate(
arr_hour = arr_time %/% 100,      # División entera para obtener la hora
arr_min = arr_time %% 100,        # Módulo para obtener los minutos
arr_datetime = make_datetime(year, month, day, arr_hour, arr_min)
)
select(flights, year, month, day, dep_time, dep_datetime, arr_time, arr_datetime)
select(flights, year, month, day, dep_time, arr_time, arr_datetime)
flights <- flights %>%
mutate(
dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
dep_datetime = make_datetime(year, month, day, dep_hour, dep_min)
)
flights <- flights %>%
mutate(
arr_hour = arr_time %/% 100,
arr_min = arr_time %% 100,
arr_datetime = make_datetime(year, month, day, arr_hour, arr_min)
)
select(flights, year, month, day, dep_time, dep_datetime, arr_time, arr_datetime)
difftime(arr_datetime,dep_datetime, units = minute)
difftime(arr_datetime$nycflights13 ,dep_datetime$nycflights13, units = "min")
flights <- flights %>%
mutate (
flight_duration = difftime(arr_datetime,dep_datetime, units = "mins")
)
select(flights, dep_datetime, arr_datetime, flight_duration)
select(flight, dep_datetime, arr_datetime, flight_duration)
flights <- flights %>%
mutate (
flight_duration = difftime(arr_datetime,dep_datetime, units = "mins")
)%>%
select(flight, dep_datetime, arr_datetime, flight_duration)
flights <- flights %>%
mutate (
flight_duration = difftime(arr_datetime,dep_datetime, units = "mins")
)%>%
select(flight, dep_datetime, arr_datetime, flight_duration)
head()
flights <- flights %>%
mutate (
flight_duration = difftime(arr_datetime,dep_datetime, units = "mins")
)%>%
select(flight, dep_datetime, arr_datetime, flight_duration) %>%
head()
head()
flights <- flights %>%
mutate (
flight_duration = difftime(arr_datetime,dep_datetime, units = "mins")
)%>%
select(flight, dep_datetime, arr_datetime, flight_duration) %>%
head()
flights <- flights %>%
mutate (
flight_duration = difftime(arr_datetime,dep_datetime, units = "mins")
)%>%
select(flight, dep_datetime, arr_datetime, flight_duration) %>%
head()
```{r, cache=TRUE, echo=TRUE, message=FALSE}
flights %>%
mutate (
flight_duration = difftime(arr_datetime,dep_datetime, units = "mins")
)%>%
select(flight, dep_datetime, arr_datetime, flight_duration) %>%
head()
select(flights, year, month, day, dep_time, dep_datetime, arr_time, arr_datetime)
flights <- flights %>%
mutate(
dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
dep_datetime = make_datetime(year, month, day, dep_hour, dep_min)
)
library(nycflights13)
library(lubridate)
library(dplyr)
library(nycflights13)
library(lubridate)
library(dplyr)
flights <- flights %>%
mutate(
dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
dep_datetime = make_datetime(year, month, day, dep_hour, dep_min)
)
flights <- flights %>%
mutate(
arr_hour = arr_time %/% 100,
arr_min = arr_time %% 100,
arr_datetime = make_datetime(year, month, day, arr_hour, arr_min)
)
select(flights, year, month, day, dep_time, dep_datetime, arr_time, arr_datetime)
flights %>%
mutate (
flight_duration = difftime(arr_datetime,dep_datetime, units = "mins")
)%>%
select(flight, dep_datetime, arr_datetime, flight_duration) %>%
head()
library(readr)
library(tidyverse)
library(stringr)
library(tidytext)
library(lubridate)
library(stopwords)
library(wordcloud)
df <- read_csv("Health_and_Personal_Care.csv")
setwd("~/GitHub/Data-Wrangling")
df <- read_csv("Health_and_Personal_Care.csv")
df$text <- str_replace_all(df$text, pattern = '\\"', replacement = '')
df %>% head()
meta <- read_csv("Health_and_Personal_Care_metadata.csv")
meta %>% head()
words <- c(
"love"
,"recommend"
,"enjoy"
)
positive_words <- paste(words, collapse = '|')
positive <- df %>%
filter(str_detect(string = df$text,pattern = positive_words)) %>%
distinct(product_id)%>%
count(name = "products_with_positive_review")
positive
filtrados <- df %>%
filter(str_detect(string = text, pattern = positive_words)) %>%
distinct(product_id,parent_id)
tiendas <- filtrados %>%
inner_join(meta, by = "parent_id") %>%
filter(!is.na(store)) %>%
group_by(store) %>%
summarise(total_products = n_distinct(product_id)) %>%
arrange(desc(total_products)) %>%
slice_max(total_products, n = 5)%>%
select(store)
tiendas
positive2 <- df %>%
filter(str_detect(string = df$text,pattern = positive_words)) %>%
distinct(product_id,text)%>%
select(text)
stop_words <- c(stopwords(language = "en"), stopwords(language = "es"))
words <- str_split(positive2$text[1:100], boundary("word")) %>% unlist()
no_stopwords <- words %>%
as_tibble() %>%
filter(!(value %in% stop_words)) %>%
group_by(value) %>%
summarise(freq = n())
wordcloud(no_stopwords$value, no_stopwords$freq)
tiendas <- c("HAARBB","Eyekepper","US Organic","Andaz Press","Generic")
parents <- meta %>%
filter(store %in% tiendas) %>%
select(parent_id)
tabla <- df %>%
inner_join(parents, by = "parent_id") %>%
select(text)
words2 <- str_split(tabla$text[1:100], boundary("word")) %>% unlist()
no_stopwords2 <- words2 %>%
as_tibble() %>%
filter(!(value %in% stop_words)) %>%
group_by(value) %>%
summarise(freq = n())
wordcloud(no_stopwords2$value, no_stopwords2$freq)
general <- str_split(df$text, boundary("word")) %>%
unlist()
no_stopwords3 <- general %>%
as_tibble() %>%
filter(!(value %in% stop_words)) %>%
group_by(value) %>%
summarise(freq = n()) %>%
arrange(desc(freq))
general_25 <- no_stopwords3 %>%
slice_max(freq, n = 25)
general_25
